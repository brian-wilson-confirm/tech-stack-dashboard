from typing import List
from fastapi import APIRouter, Depends

from sqlmodel import Session, select
from sqlalchemy.orm import selectinload
from backend.database import get_session

from backend.models import Category, Section, Source, Subcategory, Task, TaskTopicLink, TaskView, Technology
from backend.routers.dashboard import TaskLevel, TaskPriority, TaskStatus, TaskType, TasksResponse
from backend.schemas import TaskCreate

router = APIRouter(prefix="/tasks")


@router.post("/", response_model=Task)
async def create_task(task_in: TaskCreate, session: Session = Depends(get_session)):
    task = Task.from_orm(task_in)
    session.add(task)
    session.commit()
    session.refresh(task)

    for topic_id in task_in.topic_ids:
        session.add(TaskTopicLink(task_id=task.id, topic_id=topic_id))
    
    session.commit()
    return task


@router.get("/", response_model=List[TaskView])
async def get_tasks(session: Session = Depends(get_session)):
    tasks = session.exec(
        select(Task).options(selectinload(Task.topics))
    ).all()
    
    result = []
    for task in tasks:
        result.append(TaskView(
            id=task.id,
            task=task.task,
            technology=session.get(Technology, task.technology_id).name,
            subcategory=(sub := session.get(Subcategory, task.subcategory_id)) and sub.name,
            category=(cat := session.get(Category, task.category_id)) and cat.name,
            section=(sec := session.get(Section, task.section_id)) and sec.name,
            source=(src := session.get(Source, task.source_id)) and src.name,
            level=(lvl := session.get(TaskLevel, task.level_id)) and lvl.name,
            type=(typ := session.get(TaskType, task.type_id)) and typ.name,
            status=(stat := session.get(TaskStatus, task.status_id)) and stat.name,
            priority=(prio := session.get(TaskPriority, task.priority_id)) and prio.name,
            progress=task.progress,
            order=task.order,
            #due_date=task.due_date,
            start_date=task.start_date,
            end_date=task.end_date,
            estimated_duration=task.estimated_duration,
            actual_duration=task.actual_duration,
            done=task.done,
            topics=[t.name for t in task.topics]
        ))
    
    return result


@router.get("/", response_model=TasksResponse)
async def get_tasks():
    return {
        "tasks": [
            {
                "id": "1",
                "done": False,
                "task": "Complete PluralSight course on FastAPI",
                "technology": "FastAPI",
                "subcategory": "API",
                "category": "Backend",
                "section": "Learning Path",
                "estimated_duration": 8,
                "topics": ["REST API", "Python", "API Documentation", "Authentication"],
                "level": TaskLevel.INTERMEDIATE,
                "type": TaskType.LEARNING,
                "priority": TaskPriority.HIGH,
                "order": 1,
                "status": TaskStatus.IN_PROGRESS,
                "progress": 60,
                "source": "PluralSight",
                "start_date": "2024-03-01",
                "end_date": "2024-03-15",
                "actual_duration": None
            },
            {
                "id": "2",
                "done": True,
                "task": "Create responsive dashboard layout",
                "technology": "Material-UI",
                "subcategory": "UI Framework",
                "category": "Frontend",
                "section": "Implementation",
                "estimated_duration": 16,
                "topics": ["React", "Responsive Design", "Component Library", "Theming"],
                "level": TaskLevel.INTERMEDIATE,
                "type": TaskType.IMPLEMENTATION,
                "priority": TaskPriority.HIGH,
                "order": 2,
                "status": TaskStatus.COMPLETED,
                "progress": 100,
                "source": "Internal Project",
                "start_date": "2024-02-15",
                "end_date": "2024-02-28",
                "actual_duration": 20
            },
            {
                "id": "3",
                "done": False,
                "task": "Set up CI/CD pipeline with GitHub Actions",
                "technology": "Jenkins",
                "subcategory": "CI/CD",
                "category": "DevOps",
                "section": "Infrastructure",
                "estimated_duration": 24,
                "topics": ["CI/CD", "Automation", "DevOps", "GitHub Actions"],
                "level": TaskLevel.ADVANCED,
                "type": TaskType.IMPLEMENTATION,
                "priority": TaskPriority.CRITICAL,
                "order": 3,
                "status": TaskStatus.IN_PROGRESS,
                "progress": 30,
                "source": "Team Initiative",
                "start_date": "2024-03-10",
                "end_date": "2024-03-25",
                "actual_duration": None
            },
            {
                "id": "4",
                "done": True,
                "task": "Configure Redis caching layer",
                "technology": "Redis",
                "subcategory": "Caching",
                "category": "Backend",
                "section": "Performance",
                "estimated_duration": 12,
                "topics": ["Caching", "Redis", "Performance Optimization"],
                "level": TaskLevel.INTERMEDIATE,
                "type": TaskType.IMPLEMENTATION,
                "priority": TaskPriority.MEDIUM,
                "order": 4,
                "status": TaskStatus.COMPLETED,
                "progress": 100,
                "source": "Architecture Review",
                "start_date": "2024-02-01",
                "end_date": "2024-02-10",
                "actual_duration": 10
            },
            {
                "id": "5",
                "done": False,
                "task": "Write unit tests for API endpoints",
                "technology": "Jest",
                "subcategory": "Testing",
                "category": "Backend",
                "section": "Quality Assurance",
                "estimated_duration": 20,
                "topics": ["Unit Testing", "API Testing", "Test Coverage"],
                "level": TaskLevel.INTERMEDIATE,
                "type": TaskType.IMPLEMENTATION,
                "priority": TaskPriority.HIGH,
                "order": 5,
                "status": TaskStatus.NOT_STARTED,
                "progress": 0,
                "source": "Quality Standards",
                "start_date": None,
                "end_date": None,
                "actual_duration": None
            },
            {
                "id": "6",
                "done": False,
                "task": "Implement OAuth2 authentication",
                "technology": "Auth0",
                "subcategory": "Authentication",
                "category": "Security",
                "section": "Security Implementation",
                "estimated_duration": 30,
                "topics": ["OAuth2", "JWT", "Security Protocols", "User Management"],
                "level": TaskLevel.ADVANCED,
                "type": TaskType.IMPLEMENTATION,
                "priority": TaskPriority.CRITICAL,
                "order": 6,
                "status": TaskStatus.NOT_STARTED,
                "progress": 0,
                "source": "Security Audit",
                "start_date": "2024-04-01",
                "end_date": "2024-04-15",
                "actual_duration": None
            },
            {
                "id": "7",
                "done": True,
                "task": "Set up Kubernetes cluster",
                "technology": "Kubernetes",
                "subcategory": "Container Orchestration",
                "category": "DevOps",
                "section": "Infrastructure",
                "estimated_duration": 40,
                "topics": ["Kubernetes", "Container Orchestration", "High Availability"],
                "level": TaskLevel.EXPERT,
                "type": TaskType.IMPLEMENTATION,
                "priority": TaskPriority.HIGH,
                "order": 7,
                "status": TaskStatus.COMPLETED,
                "progress": 100,
                "source": "Infrastructure Upgrade",
                "start_date": "2024-01-15",
                "end_date": "2024-02-15",
                "actual_duration": 45
            },
            {
                "id": "8",
                "done": False,
                "task": "Configure Elasticsearch logging",
                "technology": "Elasticsearch",
                "subcategory": "Logging",
                "category": "Monitoring",
                "section": "Observability",
                "estimated_duration": 16,
                "topics": ["ELK Stack", "Log Management", "Monitoring"],
                "level": TaskLevel.INTERMEDIATE,
                "type": TaskType.IMPLEMENTATION,
                "priority": TaskPriority.MEDIUM,
                "order": 8,
                "status": TaskStatus.ON_HOLD,
                "progress": 25,
                "source": "Monitoring Initiative",
                "start_date": "2024-03-20",
                "end_date": None,
                "actual_duration": None
            },
            {
                "id": "9",
                "done": True,
                "task": "Implement GraphQL API",
                "technology": "Apollo",
                "subcategory": "API",
                "category": "Backend",
                "section": "API Development",
                "estimated_duration": 35,
                "topics": ["GraphQL", "API Design", "Schema Development"],
                "level": TaskLevel.ADVANCED,
                "type": TaskType.IMPLEMENTATION,
                "priority": TaskPriority.HIGH,
                "order": 9,
                "status": TaskStatus.COMPLETED,
                "progress": 100,
                "source": "API Modernization",
                "start_date": "2024-01-01",
                "end_date": "2024-02-01",
                "actual_duration": 32
            },
            {
                "id": "10",
                "done": False,
                "task": "Set up message queue system",
                "technology": "RabbitMQ",
                "subcategory": "Message Queue",
                "category": "Messaging",
                "section": "System Integration",
                "estimated_duration": 25,
                "topics": ["Message Queues", "Async Processing", "System Integration"],
                "level": TaskLevel.ADVANCED,
                "type": TaskType.IMPLEMENTATION,
                "priority": TaskPriority.HIGH,
                "order": 10,
                "status": TaskStatus.IN_PROGRESS,
                "progress": 45,
                "source": "Architecture Enhancement",
                "start_date": "2024-03-15",
                "end_date": "2024-04-01",
                "actual_duration": None
            },
            {
                "id": "11",
                "done": True,
                "task": "Implement real-time notifications",
                "technology": "WebSocket",
                "subcategory": "Real-time",
                "category": "Frontend",
                "section": "User Experience",
                "estimated_duration": 20,
                "topics": ["WebSocket", "Real-time Communication", "Push Notifications"],
                "level": TaskLevel.INTERMEDIATE,
                "type": TaskType.IMPLEMENTATION,
                "priority": TaskPriority.MEDIUM,
                "order": 11,
                "status": TaskStatus.COMPLETED,
                "progress": 100,
                "source": "UX Enhancement",
                "start_date": "2024-02-20",
                "end_date": "2024-03-05",
                "actual_duration": 18
            },
            {
                "id": "12",
                "done": False,
                "task": "Configure database replication",
                "technology": "PostgreSQL",
                "subcategory": "Database",
                "category": "Database",
                "section": "Data Management",
                "estimated_duration": 28,
                "topics": ["Database Replication", "High Availability", "Data Consistency"],
                "level": TaskLevel.EXPERT,
                "type": TaskType.IMPLEMENTATION,
                "priority": TaskPriority.CRITICAL,
                "order": 12,
                "status": TaskStatus.IN_PROGRESS,
                "progress": 70,
                "source": "Database Reliability",
                "start_date": "2024-03-01",
                "end_date": "2024-03-20",
                "actual_duration": None
            },
            {
                "id": "13",
                "done": True,
                "task": "Set up service mesh",
                "technology": "Istio",
                "subcategory": "Service Mesh",
                "category": "DevOps",
                "section": "Infrastructure",
                "estimated_duration": 45,
                "topics": ["Service Mesh", "Microservices", "Traffic Management"],
                "level": TaskLevel.EXPERT,
                "type": TaskType.IMPLEMENTATION,
                "priority": TaskPriority.HIGH,
                "order": 13,
                "status": TaskStatus.COMPLETED,
                "progress": 100,
                "source": "Architecture Modernization",
                "start_date": "2024-01-10",
                "end_date": "2024-02-20",
                "actual_duration": 50
            },
            {
                "id": "14",
                "done": False,
                "task": "Implement rate limiting",
                "technology": "Kong",
                "subcategory": "API Gateway",
                "category": "Middleware",
                "section": "API Management",
                "estimated_duration": 15,
                "topics": ["Rate Limiting", "API Gateway", "Traffic Control"],
                "level": TaskLevel.INTERMEDIATE,
                "type": TaskType.IMPLEMENTATION,
                "priority": TaskPriority.MEDIUM,
                "order": 14,
                "status": TaskStatus.NOT_STARTED,
                "progress": 0,
                "source": "API Security",
                "start_date": None,
                "end_date": None,
                "actual_duration": None
            },
            {
                "id": "15",
                "done": True,
                "task": "Set up monitoring dashboards",
                "technology": "Grafana",
                "subcategory": "Monitoring",
                "category": "DevOps",
                "section": "Observability",
                "estimated_duration": 18,
                "topics": ["Monitoring", "Metrics", "Dashboards", "Alerting"],
                "level": TaskLevel.INTERMEDIATE,
                "type": TaskType.IMPLEMENTATION,
                "priority": TaskPriority.HIGH,
                "order": 15,
                "status": TaskStatus.COMPLETED,
                "progress": 100,
                "source": "Monitoring Setup",
                "start_date": "2024-02-01",
                "end_date": "2024-02-10",
                "actual_duration": 16
            },
            {
                "id": "16",
                "done": False,
                "task": "Research AI integration options",
                "technology": "TensorFlow",
                "subcategory": "Machine Learning",
                "category": "Research",
                "section": "Innovation",
                "estimated_duration": 40,
                "topics": ["AI", "Machine Learning", "Integration Strategy"],
                "level": TaskLevel.EXPERT,
                "type": TaskType.RESEARCH,
                "priority": TaskPriority.MEDIUM,
                "order": 16,
                "status": TaskStatus.IN_PROGRESS,
                "progress": 35,
                "source": "Innovation Initiative",
                "start_date": "2024-03-01",
                "end_date": "2024-04-15",
                "actual_duration": None
            },
            {
                "id": "17",
                "done": True,
                "task": "Document API versioning strategy",
                "technology": "OpenAPI",
                "subcategory": "Documentation",
                "category": "Backend",
                "section": "Documentation",
                "estimated_duration": 10,
                "topics": ["API Documentation", "Versioning", "Best Practices"],
                "level": TaskLevel.BEGINNER,
                "type": TaskType.DOCUMENTATION,
                "priority": TaskPriority.LOW,
                "order": 17,
                "status": TaskStatus.COMPLETED,
                "progress": 100,
                "source": "Documentation Sprint",
                "start_date": "2024-02-25",
                "end_date": "2024-03-01",
                "actual_duration": 8
            }
        ]
    } 